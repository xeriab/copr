---
# monitor copr builds on changes merged to main
name: copr build status
on:
  push:
    branches: [main]
    paths:
      - "*/*.spec"
  workflow_dispatch:
    inputs:
      # checkov:skip=CKV_GHA_7:arg passed to env
      spec_file:
        description: "Spec file to monitor (format: project/package.spec)"
        required: false
        type: string
permissions:
  contents: read # required for actions/checkout
env:
  COPR_OWNER: scottames
jobs:
  matrix_from_changed_specs:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix_from_changed_spec_files.outputs.matrix }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Get changed spec files
        id: changed_specs
        uses: step-security/changed-files@95b56dadb92a30ca9036f16423fd3c088a71ee94 # v46.0.5
        with:
          files: |
            */*.spec
      - name: Create package matrix
        id: matrix_from_changed_spec_files
        # yamllint disable rule:line-length
        run: |
          set -euo pipefail
          MATRIX_JSON=""
          # used to ensure unique "project:package" strings, newline-separated
          SEEN_COMBINATIONS=""

          # Check if manual spec file was provided via workflow_dispatch
          MANUAL_SPEC_FILE="${{ github.event.inputs.spec_file }}"

          if [ -n "${MANUAL_SPEC_FILE}" ]; then
            echo "::notice::Using manually specified spec file: ${MANUAL_SPEC_FILE}"
            # Use the manually specified spec file instead of changed files
            SPEC_FILES="${MANUAL_SPEC_FILE}"
          else
            # Use the detected changed files
            SPEC_FILES="${{ steps.changed_specs.outputs.all_changed_files }}"
          fi

          for COPR_SPEC_FILE in ${SPEC_FILES}; do
            # Skip if spec_file is empty (e.g. if there were extra spaces in the input)
            if [ -z "$COPR_SPEC_FILE" ]; then
              continue
            fi

            COPR_PROJECT="$(dirname "$COPR_SPEC_FILE")"
            # Remove potential ./ prefix if present
            #   (e.g. if find results included it)
            COPR_PROJECT="${COPR_PROJECT#./}"

            # Extract package name from the 'Name:' field in the spec file
            # Using grep -Po for Perl-compatible regex to get only the matched
            # group. Assumes 'Name:' is at the beginning of a line.
            COPR_PACKAGE_NAME="$(grep -Po '^Name:\s*\K[^[:space:]]+' "$COPR_SPEC_FILE")"

            if [ -z "${COPR_PACKAGE_NAME}" ]; then
              echo "::warning file=$COPR_SPEC_FILE::Could not extract package name from $COPR_SPEC_FILE"
              continue # Skip this file if package name couldn't be extracted
            fi

            COMBO_KEY="${COPR_PROJECT}:${COPR_PACKAGE_NAME}"
            CURRENT_JSON="{\"project\":\"${COPR_PROJECT}\",\"package\":\"${COPR_PACKAGE_NAME}\"}"

            # Check if this combination has been seen before
            # grep -qxF: q (quiet), x (exact line match), F (fixed string)
            if ! echo "${SEEN_COMBINATIONS}" | grep -qxF "${COMBO_KEY}"; then
              # If new, add to SEEN_COMBINATIONS and append to MATRIX_JSON
              # Add with a newline for exact matching
              SEEN_COMBINATIONS="${SEEN_COMBINATIONS}${COMBO_KEY}"$'\n'
              if [ -z "${MATRIX_JSON}" ]; then
                MATRIX_JSON="${CURRENT_JSON}"
              else
                MATRIX_JSON="${MATRIX_JSON},${CURRENT_JSON}"
              fi
            fi
          done

          echo "::group::Generated build matrix"
          echo "Final MATRIX_JSON string: ${MATRIX_JSON}"
          echo "::endgroup::"

          # If MATRIX_JSON is empty, output an empty include list
          # otherwise, output the list of JSON objects
          if [ -z "${MATRIX_JSON}" ]; then
            # shellcheck disable=SC2086
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            # shellcheck disable=SC2086
            echo "matrix={\"include\":[$MATRIX_JSON]}" >> $GITHUB_OUTPUT
          fi
        # yamllint enable rule:line-length
  monitor-builds:
    needs: matrix_from_changed_specs
    if: needs.matrix_from_changed_specs.outputs.matrix != '{"include":[]}' || github.event.inputs.spec_file != ''
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.matrix_from_changed_specs.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Install copr-cli
        run: |
          set -euo pipefail
          echo "::group::Installing system dependencies"
          sudo apt-get update
          sudo apt-get install -y python3-dev libkrb5-dev
          echo "::endgroup::"

          echo "::group::Installing COPR CLI dependencies"
          python3 -m pip install copr-cli requests_gssapi
          echo "::endgroup::"
      - name: Monitor COPR build status
        env:
          COPR_API_TOKEN: ${{ secrets.COPR_API_TOKEN }}
        # yamllint disable rule:line-length
        run: |
          set -euo pipefail
          echo "::notice file=${{ matrix.project }}/${{ matrix.package }}.spec::Monitoring builds for ${{ matrix.project }}/${{ matrix.package }}"

          LATEST_BUILD_ID="$(copr-cli get-package "${COPR_OWNER}/${{ matrix.project }}" --name ${{ matrix.package }} --with-latest-build | jq -r '.latest_build.id')"
          echo "::debug::Build ID: ${LATEST_BUILD_ID}"

          for i in {1..30}; do
            STATUS="$(copr-cli status "${LATEST_BUILD_ID}")"
            case "${STATUS}" in
              "succeeded")
                echo "::notice file=${{ matrix.project }}/${{ matrix.package }}.spec,title=Build Success::Package ${{ matrix.package }} built successfully!"
                exit 0
                ;;
              "failed"|"canceled")
                echo "::error file=${{ matrix.project }}/${{ matrix.package }}.spec,title=Build Failure::Build failed for ${{ matrix.package }} (Status: ${STATUS})"
                exit 1
                ;;
              *)
                echo "::debug::Current status: ${STATUS} - Polling again in 2 (${i}) minutes..."
                sleep 120
                ;;
            esac
          done

          echo "::error file=${{ matrix.project }}/${{ matrix.package }}.spec,title=Build Timeout::Build monitoring timed out after 60 minutes"
          exit 1
        # yamllint enable rule:line-length
